*****************************************************************************************************************************************************
c++中，指针类型用“->”访问其成员
	class类用“.”访问其成员

class类最后一个花括号后有分号，函数则没有。

风格格式: 数据类型 作用空间::函数

*****************************************************************************************************************************************************
友元类

class Day
{
public:
	void setDay(int day)
	{
		this->day = day;
	}

	int getDay()
	{
		return day;
	}

	friend class B;//声明A为Day的友元类

private:
	int day;	
};

class A
{
public:
	void printData(Day d)
	{
		cout<<d.day;//而不需要d.getDay()
	}
};

//作用: 可以在另一个类中方便的使用该类的成员变量。例如，可以把一组变量封装到一个类中，供其友元类使用。

*****************************************************************************************************************************************************
友元函数

//在A中使用友元函数
class A
{
public:
	friend void printData(Day d)
	
};

	void printData(Day d)
	{
	cout<<d.day;//而不需要d.getDay()
	}

//作用: C和C++的转换，将类内的函数移到类外定义。

*****************************************************************************************************************************************************
虚函数

//在基类Point中定义虚函数，让子类对此函数重新定义
class Point
{//点类的声明
 public:
	Point(int x,int y);
	virual void Area();
 private:
	int x;
	int y;
};

//点类的定义
Point::Point(int x,int y)
{
	this->x = x;
	this->y = y;
}
Point::	virual void Area()
{
	cout<<"the area is 0";
}

//线类的声明
class Line : public Point
{
 public:
	Line(Point p1, Point p2);
	virual void Area();
};

//线类的定义
Line::Line(Point p1, Point p2)
{
	
}
Line::virual void Area()
{
 cout<<"the area is : "

<<"("<<p1.x<<","<<p1.y<<")"
<<"to"
<<"("<<p2.x<<","<<p2.y<<")"
<<endl;	

}

void main()
{
	Point* p;
	Line l;
	pt = &l;
	pt->Area();
}

//虚函数就是 让子类中可以对基类的函数二次定义


*****************************************************************************************************************************************************
格式字符串
%02d

printf（“%02d”， 123）；	输出“123”

printf（“%02d”， 12）；	输出“12”

printf（“%02d”， 1）；		输出“01”


*****************************************************************************************************************************************************

类内部的this是这个类对象的地址
类内部的成员函数里调用其他成员函数默认用this


*****************************************************************************************************************************************************









